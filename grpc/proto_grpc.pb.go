// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiceGameClient is the client API for DiceGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiceGameClient interface {
	Initiate(ctx context.Context, in *Commitment, opts ...grpc.CallOption) (*Value, error)
	Confirmation(ctx context.Context, in *Secrets, opts ...grpc.CallOption) (*Ack, error)
}

type diceGameClient struct {
	cc grpc.ClientConnInterface
}

func NewDiceGameClient(cc grpc.ClientConnInterface) DiceGameClient {
	return &diceGameClient{cc}
}

func (c *diceGameClient) Initiate(ctx context.Context, in *Commitment, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/DiceGame/Initiate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diceGameClient) Confirmation(ctx context.Context, in *Secrets, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/DiceGame/Confirmation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiceGameServer is the server API for DiceGame service.
// All implementations must embed UnimplementedDiceGameServer
// for forward compatibility
type DiceGameServer interface {
	Initiate(context.Context, *Commitment) (*Value, error)
	Confirmation(context.Context, *Secrets) (*Ack, error)
	mustEmbedUnimplementedDiceGameServer()
}

// UnimplementedDiceGameServer must be embedded to have forward compatible implementations.
type UnimplementedDiceGameServer struct {
}

func (UnimplementedDiceGameServer) Initiate(context.Context, *Commitment) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initiate not implemented")
}
func (UnimplementedDiceGameServer) Confirmation(context.Context, *Secrets) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirmation not implemented")
}
func (UnimplementedDiceGameServer) mustEmbedUnimplementedDiceGameServer() {}

// UnsafeDiceGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiceGameServer will
// result in compilation errors.
type UnsafeDiceGameServer interface {
	mustEmbedUnimplementedDiceGameServer()
}

func RegisterDiceGameServer(s grpc.ServiceRegistrar, srv DiceGameServer) {
	s.RegisterService(&DiceGame_ServiceDesc, srv)
}

func _DiceGame_Initiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Commitment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiceGameServer).Initiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DiceGame/Initiate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiceGameServer).Initiate(ctx, req.(*Commitment))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiceGame_Confirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secrets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiceGameServer).Confirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DiceGame/Confirmation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiceGameServer).Confirmation(ctx, req.(*Secrets))
	}
	return interceptor(ctx, in, info, handler)
}

// DiceGame_ServiceDesc is the grpc.ServiceDesc for DiceGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiceGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DiceGame",
	HandlerType: (*DiceGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initiate",
			Handler:    _DiceGame_Initiate_Handler,
		},
		{
			MethodName: "Confirmation",
			Handler:    _DiceGame_Confirmation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}
